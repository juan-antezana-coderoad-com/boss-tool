/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AdditionalReceiptDataType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdditionalReceiptDataType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"applicationId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cardNetworkName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"chipIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cvm\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"integratedCircuitData\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"rawResponseStringKICC\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantStAdd\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantState\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantCountry\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public CharSequence applicationId;
  @Deprecated public CharSequence phoneNumber;
  @Deprecated public CharSequence cardNetworkName;
  @Deprecated public CharSequence chipIndicator;
  @Deprecated public Integer cvm;
  @Deprecated public CharSequence integratedCircuitData;
  @Deprecated public CharSequence rawResponseStringKICC;
  @Deprecated public CharSequence merchantStAdd;
  @Deprecated public CharSequence merchantCity;
  @Deprecated public CharSequence merchantState;
  @Deprecated public CharSequence merchantCountry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AdditionalReceiptDataType() {}

  /**
   * All-args constructor.
   */
  public AdditionalReceiptDataType(Long id, CharSequence applicationId, CharSequence phoneNumber, CharSequence cardNetworkName, CharSequence chipIndicator, Integer cvm, CharSequence integratedCircuitData, CharSequence rawResponseStringKICC, CharSequence merchantStAdd, CharSequence merchantCity, CharSequence merchantState, CharSequence merchantCountry) {
    this.id = id;
    this.applicationId = applicationId;
    this.phoneNumber = phoneNumber;
    this.cardNetworkName = cardNetworkName;
    this.chipIndicator = chipIndicator;
    this.cvm = cvm;
    this.integratedCircuitData = integratedCircuitData;
    this.rawResponseStringKICC = rawResponseStringKICC;
    this.merchantStAdd = merchantStAdd;
    this.merchantCity = merchantCity;
    this.merchantState = merchantState;
    this.merchantCountry = merchantCountry;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return applicationId;
    case 2: return phoneNumber;
    case 3: return cardNetworkName;
    case 4: return chipIndicator;
    case 5: return cvm;
    case 6: return integratedCircuitData;
    case 7: return rawResponseStringKICC;
    case 8: return merchantStAdd;
    case 9: return merchantCity;
    case 10: return merchantState;
    case 11: return merchantCountry;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: applicationId = (CharSequence)value$; break;
    case 2: phoneNumber = (CharSequence)value$; break;
    case 3: cardNetworkName = (CharSequence)value$; break;
    case 4: chipIndicator = (CharSequence)value$; break;
    case 5: cvm = (Integer)value$; break;
    case 6: integratedCircuitData = (CharSequence)value$; break;
    case 7: rawResponseStringKICC = (CharSequence)value$; break;
    case 8: merchantStAdd = (CharSequence)value$; break;
    case 9: merchantCity = (CharSequence)value$; break;
    case 10: merchantState = (CharSequence)value$; break;
    case 11: merchantCountry = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'applicationId' field.
   */
  public CharSequence getApplicationId() {
    return applicationId;
  }

  /**
   * Sets the value of the 'applicationId' field.
   * @param value the value to set.
   */
  public void setApplicationId(CharSequence value) {
    this.applicationId = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   */
  public CharSequence getPhoneNumber() {
    return phoneNumber;
  }

  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(CharSequence value) {
    this.phoneNumber = value;
  }

  /**
   * Gets the value of the 'cardNetworkName' field.
   */
  public CharSequence getCardNetworkName() {
    return cardNetworkName;
  }

  /**
   * Sets the value of the 'cardNetworkName' field.
   * @param value the value to set.
   */
  public void setCardNetworkName(CharSequence value) {
    this.cardNetworkName = value;
  }

  /**
   * Gets the value of the 'chipIndicator' field.
   */
  public CharSequence getChipIndicator() {
    return chipIndicator;
  }

  /**
   * Sets the value of the 'chipIndicator' field.
   * @param value the value to set.
   */
  public void setChipIndicator(CharSequence value) {
    this.chipIndicator = value;
  }

  /**
   * Gets the value of the 'cvm' field.
   */
  public Integer getCvm() {
    return cvm;
  }

  /**
   * Sets the value of the 'cvm' field.
   * @param value the value to set.
   */
  public void setCvm(Integer value) {
    this.cvm = value;
  }

  /**
   * Gets the value of the 'integratedCircuitData' field.
   */
  public CharSequence getIntegratedCircuitData() {
    return integratedCircuitData;
  }

  /**
   * Sets the value of the 'integratedCircuitData' field.
   * @param value the value to set.
   */
  public void setIntegratedCircuitData(CharSequence value) {
    this.integratedCircuitData = value;
  }

  /**
   * Gets the value of the 'rawResponseStringKICC' field.
   */
  public CharSequence getRawResponseStringKICC() {
    return rawResponseStringKICC;
  }

  /**
   * Sets the value of the 'rawResponseStringKICC' field.
   * @param value the value to set.
   */
  public void setRawResponseStringKICC(CharSequence value) {
    this.rawResponseStringKICC = value;
  }

  /**
   * Gets the value of the 'merchantStAdd' field.
   */
  public CharSequence getMerchantStAdd() {
    return merchantStAdd;
  }

  /**
   * Sets the value of the 'merchantStAdd' field.
   * @param value the value to set.
   */
  public void setMerchantStAdd(CharSequence value) {
    this.merchantStAdd = value;
  }

  /**
   * Gets the value of the 'merchantCity' field.
   */
  public CharSequence getMerchantCity() {
    return merchantCity;
  }

  /**
   * Sets the value of the 'merchantCity' field.
   * @param value the value to set.
   */
  public void setMerchantCity(CharSequence value) {
    this.merchantCity = value;
  }

  /**
   * Gets the value of the 'merchantState' field.
   */
  public CharSequence getMerchantState() {
    return merchantState;
  }

  /**
   * Sets the value of the 'merchantState' field.
   * @param value the value to set.
   */
  public void setMerchantState(CharSequence value) {
    this.merchantState = value;
  }

  /**
   * Gets the value of the 'merchantCountry' field.
   */
  public CharSequence getMerchantCountry() {
    return merchantCountry;
  }

  /**
   * Sets the value of the 'merchantCountry' field.
   * @param value the value to set.
   */
  public void setMerchantCountry(CharSequence value) {
    this.merchantCountry = value;
  }

  /** Creates a new AdditionalReceiptDataType RecordBuilder */
  public static AdditionalReceiptDataType.Builder newBuilder() {
    return new AdditionalReceiptDataType.Builder();
  }
  
  /** Creates a new AdditionalReceiptDataType RecordBuilder by copying an existing Builder */
  public static AdditionalReceiptDataType.Builder newBuilder(AdditionalReceiptDataType.Builder other) {
    return new AdditionalReceiptDataType.Builder(other);
  }
  
  /** Creates a new AdditionalReceiptDataType RecordBuilder by copying an existing AdditionalReceiptDataType instance */
  public static AdditionalReceiptDataType.Builder newBuilder(AdditionalReceiptDataType other) {
    return new AdditionalReceiptDataType.Builder(other);
  }
  
  /**
   * RecordBuilder for AdditionalReceiptDataType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdditionalReceiptDataType>
    implements org.apache.avro.data.RecordBuilder<AdditionalReceiptDataType> {

    private Long id;
    private CharSequence applicationId;
    private CharSequence phoneNumber;
    private CharSequence cardNetworkName;
    private CharSequence chipIndicator;
    private Integer cvm;
    private CharSequence integratedCircuitData;
    private CharSequence rawResponseStringKICC;
    private CharSequence merchantStAdd;
    private CharSequence merchantCity;
    private CharSequence merchantState;
    private CharSequence merchantCountry;

    /** Creates a new Builder */
    private Builder() {
      super(AdditionalReceiptDataType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(AdditionalReceiptDataType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[1].schema(), other.applicationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[2].schema(), other.phoneNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cardNetworkName)) {
        this.cardNetworkName = data().deepCopy(fields()[3].schema(), other.cardNetworkName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.chipIndicator)) {
        this.chipIndicator = data().deepCopy(fields()[4].schema(), other.chipIndicator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cvm)) {
        this.cvm = data().deepCopy(fields()[5].schema(), other.cvm);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.integratedCircuitData)) {
        this.integratedCircuitData = data().deepCopy(fields()[6].schema(), other.integratedCircuitData);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.rawResponseStringKICC)) {
        this.rawResponseStringKICC = data().deepCopy(fields()[7].schema(), other.rawResponseStringKICC);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.merchantStAdd)) {
        this.merchantStAdd = data().deepCopy(fields()[8].schema(), other.merchantStAdd);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.merchantCity)) {
        this.merchantCity = data().deepCopy(fields()[9].schema(), other.merchantCity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.merchantState)) {
        this.merchantState = data().deepCopy(fields()[10].schema(), other.merchantState);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.merchantCountry)) {
        this.merchantCountry = data().deepCopy(fields()[11].schema(), other.merchantCountry);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AdditionalReceiptDataType instance */
    private Builder(AdditionalReceiptDataType other) {
            super(AdditionalReceiptDataType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[1].schema(), other.applicationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[2].schema(), other.phoneNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cardNetworkName)) {
        this.cardNetworkName = data().deepCopy(fields()[3].schema(), other.cardNetworkName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.chipIndicator)) {
        this.chipIndicator = data().deepCopy(fields()[4].schema(), other.chipIndicator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cvm)) {
        this.cvm = data().deepCopy(fields()[5].schema(), other.cvm);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.integratedCircuitData)) {
        this.integratedCircuitData = data().deepCopy(fields()[6].schema(), other.integratedCircuitData);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.rawResponseStringKICC)) {
        this.rawResponseStringKICC = data().deepCopy(fields()[7].schema(), other.rawResponseStringKICC);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.merchantStAdd)) {
        this.merchantStAdd = data().deepCopy(fields()[8].schema(), other.merchantStAdd);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.merchantCity)) {
        this.merchantCity = data().deepCopy(fields()[9].schema(), other.merchantCity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.merchantState)) {
        this.merchantState = data().deepCopy(fields()[10].schema(), other.merchantState);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.merchantCountry)) {
        this.merchantCountry = data().deepCopy(fields()[11].schema(), other.merchantCountry);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public AdditionalReceiptDataType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public AdditionalReceiptDataType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'applicationId' field */
    public CharSequence getApplicationId() {
      return applicationId;
    }
    
    /** Sets the value of the 'applicationId' field */
    public AdditionalReceiptDataType.Builder setApplicationId(CharSequence value) {
      validate(fields()[1], value);
      this.applicationId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'applicationId' field has been set */
    public boolean hasApplicationId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'applicationId' field */
    public AdditionalReceiptDataType.Builder clearApplicationId() {
      applicationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phoneNumber' field */
    public CharSequence getPhoneNumber() {
      return phoneNumber;
    }
    
    /** Sets the value of the 'phoneNumber' field */
    public AdditionalReceiptDataType.Builder setPhoneNumber(CharSequence value) {
      validate(fields()[2], value);
      this.phoneNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phoneNumber' field has been set */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phoneNumber' field */
    public AdditionalReceiptDataType.Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'cardNetworkName' field */
    public CharSequence getCardNetworkName() {
      return cardNetworkName;
    }
    
    /** Sets the value of the 'cardNetworkName' field */
    public AdditionalReceiptDataType.Builder setCardNetworkName(CharSequence value) {
      validate(fields()[3], value);
      this.cardNetworkName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'cardNetworkName' field has been set */
    public boolean hasCardNetworkName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'cardNetworkName' field */
    public AdditionalReceiptDataType.Builder clearCardNetworkName() {
      cardNetworkName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'chipIndicator' field */
    public CharSequence getChipIndicator() {
      return chipIndicator;
    }
    
    /** Sets the value of the 'chipIndicator' field */
    public AdditionalReceiptDataType.Builder setChipIndicator(CharSequence value) {
      validate(fields()[4], value);
      this.chipIndicator = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'chipIndicator' field has been set */
    public boolean hasChipIndicator() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'chipIndicator' field */
    public AdditionalReceiptDataType.Builder clearChipIndicator() {
      chipIndicator = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'cvm' field */
    public Integer getCvm() {
      return cvm;
    }
    
    /** Sets the value of the 'cvm' field */
    public AdditionalReceiptDataType.Builder setCvm(Integer value) {
      validate(fields()[5], value);
      this.cvm = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'cvm' field has been set */
    public boolean hasCvm() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'cvm' field */
    public AdditionalReceiptDataType.Builder clearCvm() {
      cvm = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'integratedCircuitData' field */
    public CharSequence getIntegratedCircuitData() {
      return integratedCircuitData;
    }
    
    /** Sets the value of the 'integratedCircuitData' field */
    public AdditionalReceiptDataType.Builder setIntegratedCircuitData(CharSequence value) {
      validate(fields()[6], value);
      this.integratedCircuitData = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'integratedCircuitData' field has been set */
    public boolean hasIntegratedCircuitData() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'integratedCircuitData' field */
    public AdditionalReceiptDataType.Builder clearIntegratedCircuitData() {
      integratedCircuitData = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'rawResponseStringKICC' field */
    public CharSequence getRawResponseStringKICC() {
      return rawResponseStringKICC;
    }
    
    /** Sets the value of the 'rawResponseStringKICC' field */
    public AdditionalReceiptDataType.Builder setRawResponseStringKICC(CharSequence value) {
      validate(fields()[7], value);
      this.rawResponseStringKICC = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'rawResponseStringKICC' field has been set */
    public boolean hasRawResponseStringKICC() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'rawResponseStringKICC' field */
    public AdditionalReceiptDataType.Builder clearRawResponseStringKICC() {
      rawResponseStringKICC = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'merchantStAdd' field */
    public CharSequence getMerchantStAdd() {
      return merchantStAdd;
    }
    
    /** Sets the value of the 'merchantStAdd' field */
    public AdditionalReceiptDataType.Builder setMerchantStAdd(CharSequence value) {
      validate(fields()[8], value);
      this.merchantStAdd = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantStAdd' field has been set */
    public boolean hasMerchantStAdd() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'merchantStAdd' field */
    public AdditionalReceiptDataType.Builder clearMerchantStAdd() {
      merchantStAdd = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'merchantCity' field */
    public CharSequence getMerchantCity() {
      return merchantCity;
    }
    
    /** Sets the value of the 'merchantCity' field */
    public AdditionalReceiptDataType.Builder setMerchantCity(CharSequence value) {
      validate(fields()[9], value);
      this.merchantCity = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantCity' field has been set */
    public boolean hasMerchantCity() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'merchantCity' field */
    public AdditionalReceiptDataType.Builder clearMerchantCity() {
      merchantCity = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'merchantState' field */
    public CharSequence getMerchantState() {
      return merchantState;
    }
    
    /** Sets the value of the 'merchantState' field */
    public AdditionalReceiptDataType.Builder setMerchantState(CharSequence value) {
      validate(fields()[10], value);
      this.merchantState = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantState' field has been set */
    public boolean hasMerchantState() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'merchantState' field */
    public AdditionalReceiptDataType.Builder clearMerchantState() {
      merchantState = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'merchantCountry' field */
    public CharSequence getMerchantCountry() {
      return merchantCountry;
    }
    
    /** Sets the value of the 'merchantCountry' field */
    public AdditionalReceiptDataType.Builder setMerchantCountry(CharSequence value) {
      validate(fields()[11], value);
      this.merchantCountry = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantCountry' field has been set */
    public boolean hasMerchantCountry() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'merchantCountry' field */
    public AdditionalReceiptDataType.Builder clearMerchantCountry() {
      merchantCountry = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public AdditionalReceiptDataType build() {
      try {
        AdditionalReceiptDataType record = new AdditionalReceiptDataType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.applicationId = fieldSetFlags()[1] ? this.applicationId : (CharSequence) defaultValue(fields()[1]);
        record.phoneNumber = fieldSetFlags()[2] ? this.phoneNumber : (CharSequence) defaultValue(fields()[2]);
        record.cardNetworkName = fieldSetFlags()[3] ? this.cardNetworkName : (CharSequence) defaultValue(fields()[3]);
        record.chipIndicator = fieldSetFlags()[4] ? this.chipIndicator : (CharSequence) defaultValue(fields()[4]);
        record.cvm = fieldSetFlags()[5] ? this.cvm : (Integer) defaultValue(fields()[5]);
        record.integratedCircuitData = fieldSetFlags()[6] ? this.integratedCircuitData : (CharSequence) defaultValue(fields()[6]);
        record.rawResponseStringKICC = fieldSetFlags()[7] ? this.rawResponseStringKICC : (CharSequence) defaultValue(fields()[7]);
        record.merchantStAdd = fieldSetFlags()[8] ? this.merchantStAdd : (CharSequence) defaultValue(fields()[8]);
        record.merchantCity = fieldSetFlags()[9] ? this.merchantCity : (CharSequence) defaultValue(fields()[9]);
        record.merchantState = fieldSetFlags()[10] ? this.merchantState : (CharSequence) defaultValue(fields()[10]);
        record.merchantCountry = fieldSetFlags()[11] ? this.merchantCountry : (CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
