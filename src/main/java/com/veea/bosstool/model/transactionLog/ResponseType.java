/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ResponseType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResponseType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"authCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"creditEMD\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"localDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"localTime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"responseCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sysTraceAuditNum\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"terminalId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transmissionTimeDate\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public CharSequence authCode;
  @Deprecated public Boolean creditEMD;
  @Deprecated public CharSequence localDate;
  @Deprecated public CharSequence localTime;
  @Deprecated public CharSequence responseCode;
  @Deprecated public CharSequence sysTraceAuditNum;
  @Deprecated public CharSequence terminalId;
  @Deprecated public CharSequence transmissionTimeDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ResponseType() {}

  /**
   * All-args constructor.
   */
  public ResponseType(Long id, CharSequence authCode, Boolean creditEMD, CharSequence localDate, CharSequence localTime, CharSequence responseCode, CharSequence sysTraceAuditNum, CharSequence terminalId, CharSequence transmissionTimeDate) {
    this.id = id;
    this.authCode = authCode;
    this.creditEMD = creditEMD;
    this.localDate = localDate;
    this.localTime = localTime;
    this.responseCode = responseCode;
    this.sysTraceAuditNum = sysTraceAuditNum;
    this.terminalId = terminalId;
    this.transmissionTimeDate = transmissionTimeDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return authCode;
    case 2: return creditEMD;
    case 3: return localDate;
    case 4: return localTime;
    case 5: return responseCode;
    case 6: return sysTraceAuditNum;
    case 7: return terminalId;
    case 8: return transmissionTimeDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: authCode = (CharSequence)value$; break;
    case 2: creditEMD = (Boolean)value$; break;
    case 3: localDate = (CharSequence)value$; break;
    case 4: localTime = (CharSequence)value$; break;
    case 5: responseCode = (CharSequence)value$; break;
    case 6: sysTraceAuditNum = (CharSequence)value$; break;
    case 7: terminalId = (CharSequence)value$; break;
    case 8: transmissionTimeDate = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'authCode' field.
   */
  public CharSequence getAuthCode() {
    return authCode;
  }

  /**
   * Sets the value of the 'authCode' field.
   * @param value the value to set.
   */
  public void setAuthCode(CharSequence value) {
    this.authCode = value;
  }

  /**
   * Gets the value of the 'creditEMD' field.
   */
  public Boolean getCreditEMD() {
    return creditEMD;
  }

  /**
   * Sets the value of the 'creditEMD' field.
   * @param value the value to set.
   */
  public void setCreditEMD(Boolean value) {
    this.creditEMD = value;
  }

  /**
   * Gets the value of the 'localDate' field.
   */
  public CharSequence getLocalDate() {
    return localDate;
  }

  /**
   * Sets the value of the 'localDate' field.
   * @param value the value to set.
   */
  public void setLocalDate(CharSequence value) {
    this.localDate = value;
  }

  /**
   * Gets the value of the 'localTime' field.
   */
  public CharSequence getLocalTime() {
    return localTime;
  }

  /**
   * Sets the value of the 'localTime' field.
   * @param value the value to set.
   */
  public void setLocalTime(CharSequence value) {
    this.localTime = value;
  }

  /**
   * Gets the value of the 'responseCode' field.
   */
  public CharSequence getResponseCode() {
    return responseCode;
  }

  /**
   * Sets the value of the 'responseCode' field.
   * @param value the value to set.
   */
  public void setResponseCode(CharSequence value) {
    this.responseCode = value;
  }

  /**
   * Gets the value of the 'sysTraceAuditNum' field.
   */
  public CharSequence getSysTraceAuditNum() {
    return sysTraceAuditNum;
  }

  /**
   * Sets the value of the 'sysTraceAuditNum' field.
   * @param value the value to set.
   */
  public void setSysTraceAuditNum(CharSequence value) {
    this.sysTraceAuditNum = value;
  }

  /**
   * Gets the value of the 'terminalId' field.
   */
  public CharSequence getTerminalId() {
    return terminalId;
  }

  /**
   * Sets the value of the 'terminalId' field.
   * @param value the value to set.
   */
  public void setTerminalId(CharSequence value) {
    this.terminalId = value;
  }

  /**
   * Gets the value of the 'transmissionTimeDate' field.
   */
  public CharSequence getTransmissionTimeDate() {
    return transmissionTimeDate;
  }

  /**
   * Sets the value of the 'transmissionTimeDate' field.
   * @param value the value to set.
   */
  public void setTransmissionTimeDate(CharSequence value) {
    this.transmissionTimeDate = value;
  }

  /** Creates a new ResponseType RecordBuilder */
  public static ResponseType.Builder newBuilder() {
    return new ResponseType.Builder();
  }
  
  /** Creates a new ResponseType RecordBuilder by copying an existing Builder */
  public static ResponseType.Builder newBuilder(ResponseType.Builder other) {
    return new ResponseType.Builder(other);
  }
  
  /** Creates a new ResponseType RecordBuilder by copying an existing ResponseType instance */
  public static ResponseType.Builder newBuilder(ResponseType other) {
    return new ResponseType.Builder(other);
  }
  
  /**
   * RecordBuilder for ResponseType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResponseType>
    implements org.apache.avro.data.RecordBuilder<ResponseType> {

    private Long id;
    private CharSequence authCode;
    private Boolean creditEMD;
    private CharSequence localDate;
    private CharSequence localTime;
    private CharSequence responseCode;
    private CharSequence sysTraceAuditNum;
    private CharSequence terminalId;
    private CharSequence transmissionTimeDate;

    /** Creates a new Builder */
    private Builder() {
      super(ResponseType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ResponseType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.authCode)) {
        this.authCode = data().deepCopy(fields()[1].schema(), other.authCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creditEMD)) {
        this.creditEMD = data().deepCopy(fields()[2].schema(), other.creditEMD);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.localDate)) {
        this.localDate = data().deepCopy(fields()[3].schema(), other.localDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.localTime)) {
        this.localTime = data().deepCopy(fields()[4].schema(), other.localTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.responseCode)) {
        this.responseCode = data().deepCopy(fields()[5].schema(), other.responseCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sysTraceAuditNum)) {
        this.sysTraceAuditNum = data().deepCopy(fields()[6].schema(), other.sysTraceAuditNum);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[7].schema(), other.terminalId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transmissionTimeDate)) {
        this.transmissionTimeDate = data().deepCopy(fields()[8].schema(), other.transmissionTimeDate);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ResponseType instance */
    private Builder(ResponseType other) {
            super(ResponseType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.authCode)) {
        this.authCode = data().deepCopy(fields()[1].schema(), other.authCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creditEMD)) {
        this.creditEMD = data().deepCopy(fields()[2].schema(), other.creditEMD);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.localDate)) {
        this.localDate = data().deepCopy(fields()[3].schema(), other.localDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.localTime)) {
        this.localTime = data().deepCopy(fields()[4].schema(), other.localTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.responseCode)) {
        this.responseCode = data().deepCopy(fields()[5].schema(), other.responseCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sysTraceAuditNum)) {
        this.sysTraceAuditNum = data().deepCopy(fields()[6].schema(), other.sysTraceAuditNum);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[7].schema(), other.terminalId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transmissionTimeDate)) {
        this.transmissionTimeDate = data().deepCopy(fields()[8].schema(), other.transmissionTimeDate);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public ResponseType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public ResponseType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'authCode' field */
    public CharSequence getAuthCode() {
      return authCode;
    }
    
    /** Sets the value of the 'authCode' field */
    public ResponseType.Builder setAuthCode(CharSequence value) {
      validate(fields()[1], value);
      this.authCode = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'authCode' field has been set */
    public boolean hasAuthCode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'authCode' field */
    public ResponseType.Builder clearAuthCode() {
      authCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'creditEMD' field */
    public Boolean getCreditEMD() {
      return creditEMD;
    }
    
    /** Sets the value of the 'creditEMD' field */
    public ResponseType.Builder setCreditEMD(Boolean value) {
      validate(fields()[2], value);
      this.creditEMD = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'creditEMD' field has been set */
    public boolean hasCreditEMD() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'creditEMD' field */
    public ResponseType.Builder clearCreditEMD() {
      creditEMD = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'localDate' field */
    public CharSequence getLocalDate() {
      return localDate;
    }
    
    /** Sets the value of the 'localDate' field */
    public ResponseType.Builder setLocalDate(CharSequence value) {
      validate(fields()[3], value);
      this.localDate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'localDate' field has been set */
    public boolean hasLocalDate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'localDate' field */
    public ResponseType.Builder clearLocalDate() {
      localDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'localTime' field */
    public CharSequence getLocalTime() {
      return localTime;
    }
    
    /** Sets the value of the 'localTime' field */
    public ResponseType.Builder setLocalTime(CharSequence value) {
      validate(fields()[4], value);
      this.localTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'localTime' field has been set */
    public boolean hasLocalTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'localTime' field */
    public ResponseType.Builder clearLocalTime() {
      localTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'responseCode' field */
    public CharSequence getResponseCode() {
      return responseCode;
    }
    
    /** Sets the value of the 'responseCode' field */
    public ResponseType.Builder setResponseCode(CharSequence value) {
      validate(fields()[5], value);
      this.responseCode = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'responseCode' field has been set */
    public boolean hasResponseCode() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'responseCode' field */
    public ResponseType.Builder clearResponseCode() {
      responseCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sysTraceAuditNum' field */
    public CharSequence getSysTraceAuditNum() {
      return sysTraceAuditNum;
    }
    
    /** Sets the value of the 'sysTraceAuditNum' field */
    public ResponseType.Builder setSysTraceAuditNum(CharSequence value) {
      validate(fields()[6], value);
      this.sysTraceAuditNum = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sysTraceAuditNum' field has been set */
    public boolean hasSysTraceAuditNum() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sysTraceAuditNum' field */
    public ResponseType.Builder clearSysTraceAuditNum() {
      sysTraceAuditNum = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'terminalId' field */
    public CharSequence getTerminalId() {
      return terminalId;
    }
    
    /** Sets the value of the 'terminalId' field */
    public ResponseType.Builder setTerminalId(CharSequence value) {
      validate(fields()[7], value);
      this.terminalId = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'terminalId' field has been set */
    public boolean hasTerminalId() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'terminalId' field */
    public ResponseType.Builder clearTerminalId() {
      terminalId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'transmissionTimeDate' field */
    public CharSequence getTransmissionTimeDate() {
      return transmissionTimeDate;
    }
    
    /** Sets the value of the 'transmissionTimeDate' field */
    public ResponseType.Builder setTransmissionTimeDate(CharSequence value) {
      validate(fields()[8], value);
      this.transmissionTimeDate = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'transmissionTimeDate' field has been set */
    public boolean hasTransmissionTimeDate() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'transmissionTimeDate' field */
    public ResponseType.Builder clearTransmissionTimeDate() {
      transmissionTimeDate = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public ResponseType build() {
      try {
        ResponseType record = new ResponseType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.authCode = fieldSetFlags()[1] ? this.authCode : (CharSequence) defaultValue(fields()[1]);
        record.creditEMD = fieldSetFlags()[2] ? this.creditEMD : (Boolean) defaultValue(fields()[2]);
        record.localDate = fieldSetFlags()[3] ? this.localDate : (CharSequence) defaultValue(fields()[3]);
        record.localTime = fieldSetFlags()[4] ? this.localTime : (CharSequence) defaultValue(fields()[4]);
        record.responseCode = fieldSetFlags()[5] ? this.responseCode : (CharSequence) defaultValue(fields()[5]);
        record.sysTraceAuditNum = fieldSetFlags()[6] ? this.sysTraceAuditNum : (CharSequence) defaultValue(fields()[6]);
        record.terminalId = fieldSetFlags()[7] ? this.terminalId : (CharSequence) defaultValue(fields()[7]);
        record.transmissionTimeDate = fieldSetFlags()[8] ? this.transmissionTimeDate : (CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
