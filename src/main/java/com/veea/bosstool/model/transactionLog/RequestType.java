/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RequestType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RequestType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"acquireInstId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"addPOS\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cardMasked\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"creditEMD\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"currencyCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entryMode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fee\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"localDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"localTime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantAddress\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"merchantType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"messageType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"posConCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"processingCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"retrievalRrefNum\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sysTraceAuditNum\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"terminalId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transmissionTimeDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"vantivTransactionData\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"vantivTransactionDataBinaryBitmap\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"vantivTransactionDataBitmap\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"year\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"taxRate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"totalTaxAmount\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public CharSequence acquireInstId;
  @Deprecated public CharSequence addPOS;
  @Deprecated public CharSequence amount;
  @Deprecated public CharSequence cardMasked;
  @Deprecated public Boolean creditEMD;
  @Deprecated public CharSequence currencyCode;
  @Deprecated public CharSequence entryMode;
  @Deprecated public CharSequence fee;
  @Deprecated public CharSequence localDate;
  @Deprecated public CharSequence localTime;
  @Deprecated public CharSequence merchantAddress;
  @Deprecated public CharSequence merchantId;
  @Deprecated public CharSequence merchantName;
  @Deprecated public CharSequence merchantType;
  @Deprecated public CharSequence messageType;
  @Deprecated public CharSequence posConCode;
  @Deprecated public CharSequence processingCode;
  @Deprecated public CharSequence retrievalRrefNum;
  @Deprecated public CharSequence sysTraceAuditNum;
  @Deprecated public CharSequence terminalId;
  @Deprecated public CharSequence transmissionTimeDate;
  @Deprecated public CharSequence vantivTransactionData;
  @Deprecated public CharSequence vantivTransactionDataBinaryBitmap;
  @Deprecated public CharSequence vantivTransactionDataBitmap;
  @Deprecated public CharSequence year;
  @Deprecated public CharSequence taxRate;
  @Deprecated public CharSequence totalTaxAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RequestType() {}

  /**
   * All-args constructor.
   */
  public RequestType(Long id, CharSequence acquireInstId, CharSequence addPOS, CharSequence amount, CharSequence cardMasked, Boolean creditEMD, CharSequence currencyCode, CharSequence entryMode, CharSequence fee, CharSequence localDate, CharSequence localTime, CharSequence merchantAddress, CharSequence merchantId, CharSequence merchantName, CharSequence merchantType, CharSequence messageType, CharSequence posConCode, CharSequence processingCode, CharSequence retrievalRrefNum, CharSequence sysTraceAuditNum, CharSequence terminalId, CharSequence transmissionTimeDate, CharSequence vantivTransactionData, CharSequence vantivTransactionDataBinaryBitmap, CharSequence vantivTransactionDataBitmap, CharSequence year, CharSequence taxRate, CharSequence totalTaxAmount) {
    this.id = id;
    this.acquireInstId = acquireInstId;
    this.addPOS = addPOS;
    this.amount = amount;
    this.cardMasked = cardMasked;
    this.creditEMD = creditEMD;
    this.currencyCode = currencyCode;
    this.entryMode = entryMode;
    this.fee = fee;
    this.localDate = localDate;
    this.localTime = localTime;
    this.merchantAddress = merchantAddress;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.merchantType = merchantType;
    this.messageType = messageType;
    this.posConCode = posConCode;
    this.processingCode = processingCode;
    this.retrievalRrefNum = retrievalRrefNum;
    this.sysTraceAuditNum = sysTraceAuditNum;
    this.terminalId = terminalId;
    this.transmissionTimeDate = transmissionTimeDate;
    this.vantivTransactionData = vantivTransactionData;
    this.vantivTransactionDataBinaryBitmap = vantivTransactionDataBinaryBitmap;
    this.vantivTransactionDataBitmap = vantivTransactionDataBitmap;
    this.year = year;
    this.taxRate = taxRate;
    this.totalTaxAmount = totalTaxAmount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return acquireInstId;
    case 2: return addPOS;
    case 3: return amount;
    case 4: return cardMasked;
    case 5: return creditEMD;
    case 6: return currencyCode;
    case 7: return entryMode;
    case 8: return fee;
    case 9: return localDate;
    case 10: return localTime;
    case 11: return merchantAddress;
    case 12: return merchantId;
    case 13: return merchantName;
    case 14: return merchantType;
    case 15: return messageType;
    case 16: return posConCode;
    case 17: return processingCode;
    case 18: return retrievalRrefNum;
    case 19: return sysTraceAuditNum;
    case 20: return terminalId;
    case 21: return transmissionTimeDate;
    case 22: return vantivTransactionData;
    case 23: return vantivTransactionDataBinaryBitmap;
    case 24: return vantivTransactionDataBitmap;
    case 25: return year;
    case 26: return taxRate;
    case 27: return totalTaxAmount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: acquireInstId = (CharSequence)value$; break;
    case 2: addPOS = (CharSequence)value$; break;
    case 3: amount = (CharSequence)value$; break;
    case 4: cardMasked = (CharSequence)value$; break;
    case 5: creditEMD = (Boolean)value$; break;
    case 6: currencyCode = (CharSequence)value$; break;
    case 7: entryMode = (CharSequence)value$; break;
    case 8: fee = (CharSequence)value$; break;
    case 9: localDate = (CharSequence)value$; break;
    case 10: localTime = (CharSequence)value$; break;
    case 11: merchantAddress = (CharSequence)value$; break;
    case 12: merchantId = (CharSequence)value$; break;
    case 13: merchantName = (CharSequence)value$; break;
    case 14: merchantType = (CharSequence)value$; break;
    case 15: messageType = (CharSequence)value$; break;
    case 16: posConCode = (CharSequence)value$; break;
    case 17: processingCode = (CharSequence)value$; break;
    case 18: retrievalRrefNum = (CharSequence)value$; break;
    case 19: sysTraceAuditNum = (CharSequence)value$; break;
    case 20: terminalId = (CharSequence)value$; break;
    case 21: transmissionTimeDate = (CharSequence)value$; break;
    case 22: vantivTransactionData = (CharSequence)value$; break;
    case 23: vantivTransactionDataBinaryBitmap = (CharSequence)value$; break;
    case 24: vantivTransactionDataBitmap = (CharSequence)value$; break;
    case 25: year = (CharSequence)value$; break;
    case 26: taxRate = (CharSequence)value$; break;
    case 27: totalTaxAmount = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'acquireInstId' field.
   */
  public CharSequence getAcquireInstId() {
    return acquireInstId;
  }

  /**
   * Sets the value of the 'acquireInstId' field.
   * @param value the value to set.
   */
  public void setAcquireInstId(CharSequence value) {
    this.acquireInstId = value;
  }

  /**
   * Gets the value of the 'addPOS' field.
   */
  public CharSequence getAddPOS() {
    return addPOS;
  }

  /**
   * Sets the value of the 'addPOS' field.
   * @param value the value to set.
   */
  public void setAddPOS(CharSequence value) {
    this.addPOS = value;
  }

  /**
   * Gets the value of the 'amount' field.
   */
  public CharSequence getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'cardMasked' field.
   */
  public CharSequence getCardMasked() {
    return cardMasked;
  }

  /**
   * Sets the value of the 'cardMasked' field.
   * @param value the value to set.
   */
  public void setCardMasked(CharSequence value) {
    this.cardMasked = value;
  }

  /**
   * Gets the value of the 'creditEMD' field.
   */
  public Boolean getCreditEMD() {
    return creditEMD;
  }

  /**
   * Sets the value of the 'creditEMD' field.
   * @param value the value to set.
   */
  public void setCreditEMD(Boolean value) {
    this.creditEMD = value;
  }

  /**
   * Gets the value of the 'currencyCode' field.
   */
  public CharSequence getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Sets the value of the 'currencyCode' field.
   * @param value the value to set.
   */
  public void setCurrencyCode(CharSequence value) {
    this.currencyCode = value;
  }

  /**
   * Gets the value of the 'entryMode' field.
   */
  public CharSequence getEntryMode() {
    return entryMode;
  }

  /**
   * Sets the value of the 'entryMode' field.
   * @param value the value to set.
   */
  public void setEntryMode(CharSequence value) {
    this.entryMode = value;
  }

  /**
   * Gets the value of the 'fee' field.
   */
  public CharSequence getFee() {
    return fee;
  }

  /**
   * Sets the value of the 'fee' field.
   * @param value the value to set.
   */
  public void setFee(CharSequence value) {
    this.fee = value;
  }

  /**
   * Gets the value of the 'localDate' field.
   */
  public CharSequence getLocalDate() {
    return localDate;
  }

  /**
   * Sets the value of the 'localDate' field.
   * @param value the value to set.
   */
  public void setLocalDate(CharSequence value) {
    this.localDate = value;
  }

  /**
   * Gets the value of the 'localTime' field.
   */
  public CharSequence getLocalTime() {
    return localTime;
  }

  /**
   * Sets the value of the 'localTime' field.
   * @param value the value to set.
   */
  public void setLocalTime(CharSequence value) {
    this.localTime = value;
  }

  /**
   * Gets the value of the 'merchantAddress' field.
   */
  public CharSequence getMerchantAddress() {
    return merchantAddress;
  }

  /**
   * Sets the value of the 'merchantAddress' field.
   * @param value the value to set.
   */
  public void setMerchantAddress(CharSequence value) {
    this.merchantAddress = value;
  }

  /**
   * Gets the value of the 'merchantId' field.
   */
  public CharSequence getMerchantId() {
    return merchantId;
  }

  /**
   * Sets the value of the 'merchantId' field.
   * @param value the value to set.
   */
  public void setMerchantId(CharSequence value) {
    this.merchantId = value;
  }

  /**
   * Gets the value of the 'merchantName' field.
   */
  public CharSequence getMerchantName() {
    return merchantName;
  }

  /**
   * Sets the value of the 'merchantName' field.
   * @param value the value to set.
   */
  public void setMerchantName(CharSequence value) {
    this.merchantName = value;
  }

  /**
   * Gets the value of the 'merchantType' field.
   */
  public CharSequence getMerchantType() {
    return merchantType;
  }

  /**
   * Sets the value of the 'merchantType' field.
   * @param value the value to set.
   */
  public void setMerchantType(CharSequence value) {
    this.merchantType = value;
  }

  /**
   * Gets the value of the 'messageType' field.
   */
  public CharSequence getMessageType() {
    return messageType;
  }

  /**
   * Sets the value of the 'messageType' field.
   * @param value the value to set.
   */
  public void setMessageType(CharSequence value) {
    this.messageType = value;
  }

  /**
   * Gets the value of the 'posConCode' field.
   */
  public CharSequence getPosConCode() {
    return posConCode;
  }

  /**
   * Sets the value of the 'posConCode' field.
   * @param value the value to set.
   */
  public void setPosConCode(CharSequence value) {
    this.posConCode = value;
  }

  /**
   * Gets the value of the 'processingCode' field.
   */
  public CharSequence getProcessingCode() {
    return processingCode;
  }

  /**
   * Sets the value of the 'processingCode' field.
   * @param value the value to set.
   */
  public void setProcessingCode(CharSequence value) {
    this.processingCode = value;
  }

  /**
   * Gets the value of the 'retrievalRrefNum' field.
   */
  public CharSequence getRetrievalRrefNum() {
    return retrievalRrefNum;
  }

  /**
   * Sets the value of the 'retrievalRrefNum' field.
   * @param value the value to set.
   */
  public void setRetrievalRrefNum(CharSequence value) {
    this.retrievalRrefNum = value;
  }

  /**
   * Gets the value of the 'sysTraceAuditNum' field.
   */
  public CharSequence getSysTraceAuditNum() {
    return sysTraceAuditNum;
  }

  /**
   * Sets the value of the 'sysTraceAuditNum' field.
   * @param value the value to set.
   */
  public void setSysTraceAuditNum(CharSequence value) {
    this.sysTraceAuditNum = value;
  }

  /**
   * Gets the value of the 'terminalId' field.
   */
  public CharSequence getTerminalId() {
    return terminalId;
  }

  /**
   * Sets the value of the 'terminalId' field.
   * @param value the value to set.
   */
  public void setTerminalId(CharSequence value) {
    this.terminalId = value;
  }

  /**
   * Gets the value of the 'transmissionTimeDate' field.
   */
  public CharSequence getTransmissionTimeDate() {
    return transmissionTimeDate;
  }

  /**
   * Sets the value of the 'transmissionTimeDate' field.
   * @param value the value to set.
   */
  public void setTransmissionTimeDate(CharSequence value) {
    this.transmissionTimeDate = value;
  }

  /**
   * Gets the value of the 'vantivTransactionData' field.
   */
  public CharSequence getVantivTransactionData() {
    return vantivTransactionData;
  }

  /**
   * Sets the value of the 'vantivTransactionData' field.
   * @param value the value to set.
   */
  public void setVantivTransactionData(CharSequence value) {
    this.vantivTransactionData = value;
  }

  /**
   * Gets the value of the 'vantivTransactionDataBinaryBitmap' field.
   */
  public CharSequence getVantivTransactionDataBinaryBitmap() {
    return vantivTransactionDataBinaryBitmap;
  }

  /**
   * Sets the value of the 'vantivTransactionDataBinaryBitmap' field.
   * @param value the value to set.
   */
  public void setVantivTransactionDataBinaryBitmap(CharSequence value) {
    this.vantivTransactionDataBinaryBitmap = value;
  }

  /**
   * Gets the value of the 'vantivTransactionDataBitmap' field.
   */
  public CharSequence getVantivTransactionDataBitmap() {
    return vantivTransactionDataBitmap;
  }

  /**
   * Sets the value of the 'vantivTransactionDataBitmap' field.
   * @param value the value to set.
   */
  public void setVantivTransactionDataBitmap(CharSequence value) {
    this.vantivTransactionDataBitmap = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'taxRate' field.
   */
  public CharSequence getTaxRate() {
    return taxRate;
  }

  /**
   * Sets the value of the 'taxRate' field.
   * @param value the value to set.
   */
  public void setTaxRate(CharSequence value) {
    this.taxRate = value;
  }

  /**
   * Gets the value of the 'totalTaxAmount' field.
   */
  public CharSequence getTotalTaxAmount() {
    return totalTaxAmount;
  }

  /**
   * Sets the value of the 'totalTaxAmount' field.
   * @param value the value to set.
   */
  public void setTotalTaxAmount(CharSequence value) {
    this.totalTaxAmount = value;
  }

  /** Creates a new RequestType RecordBuilder */
  public static RequestType.Builder newBuilder() {
    return new RequestType.Builder();
  }
  
  /** Creates a new RequestType RecordBuilder by copying an existing Builder */
  public static RequestType.Builder newBuilder(RequestType.Builder other) {
    return new RequestType.Builder(other);
  }
  
  /** Creates a new RequestType RecordBuilder by copying an existing RequestType instance */
  public static RequestType.Builder newBuilder(RequestType other) {
    return new RequestType.Builder(other);
  }
  
  /**
   * RecordBuilder for RequestType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RequestType>
    implements org.apache.avro.data.RecordBuilder<RequestType> {

    private Long id;
    private CharSequence acquireInstId;
    private CharSequence addPOS;
    private CharSequence amount;
    private CharSequence cardMasked;
    private Boolean creditEMD;
    private CharSequence currencyCode;
    private CharSequence entryMode;
    private CharSequence fee;
    private CharSequence localDate;
    private CharSequence localTime;
    private CharSequence merchantAddress;
    private CharSequence merchantId;
    private CharSequence merchantName;
    private CharSequence merchantType;
    private CharSequence messageType;
    private CharSequence posConCode;
    private CharSequence processingCode;
    private CharSequence retrievalRrefNum;
    private CharSequence sysTraceAuditNum;
    private CharSequence terminalId;
    private CharSequence transmissionTimeDate;
    private CharSequence vantivTransactionData;
    private CharSequence vantivTransactionDataBinaryBitmap;
    private CharSequence vantivTransactionDataBitmap;
    private CharSequence year;
    private CharSequence taxRate;
    private CharSequence totalTaxAmount;

    /** Creates a new Builder */
    private Builder() {
      super(RequestType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(RequestType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acquireInstId)) {
        this.acquireInstId = data().deepCopy(fields()[1].schema(), other.acquireInstId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.addPOS)) {
        this.addPOS = data().deepCopy(fields()[2].schema(), other.addPOS);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cardMasked)) {
        this.cardMasked = data().deepCopy(fields()[4].schema(), other.cardMasked);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.creditEMD)) {
        this.creditEMD = data().deepCopy(fields()[5].schema(), other.creditEMD);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[6].schema(), other.currencyCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entryMode)) {
        this.entryMode = data().deepCopy(fields()[7].schema(), other.entryMode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fee)) {
        this.fee = data().deepCopy(fields()[8].schema(), other.fee);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.localDate)) {
        this.localDate = data().deepCopy(fields()[9].schema(), other.localDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.localTime)) {
        this.localTime = data().deepCopy(fields()[10].schema(), other.localTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.merchantAddress)) {
        this.merchantAddress = data().deepCopy(fields()[11].schema(), other.merchantAddress);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.merchantId)) {
        this.merchantId = data().deepCopy(fields()[12].schema(), other.merchantId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.merchantName)) {
        this.merchantName = data().deepCopy(fields()[13].schema(), other.merchantName);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.merchantType)) {
        this.merchantType = data().deepCopy(fields()[14].schema(), other.merchantType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.messageType)) {
        this.messageType = data().deepCopy(fields()[15].schema(), other.messageType);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.posConCode)) {
        this.posConCode = data().deepCopy(fields()[16].schema(), other.posConCode);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.processingCode)) {
        this.processingCode = data().deepCopy(fields()[17].schema(), other.processingCode);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.retrievalRrefNum)) {
        this.retrievalRrefNum = data().deepCopy(fields()[18].schema(), other.retrievalRrefNum);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.sysTraceAuditNum)) {
        this.sysTraceAuditNum = data().deepCopy(fields()[19].schema(), other.sysTraceAuditNum);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[20].schema(), other.terminalId);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transmissionTimeDate)) {
        this.transmissionTimeDate = data().deepCopy(fields()[21].schema(), other.transmissionTimeDate);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.vantivTransactionData)) {
        this.vantivTransactionData = data().deepCopy(fields()[22].schema(), other.vantivTransactionData);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.vantivTransactionDataBinaryBitmap)) {
        this.vantivTransactionDataBinaryBitmap = data().deepCopy(fields()[23].schema(), other.vantivTransactionDataBinaryBitmap);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.vantivTransactionDataBitmap)) {
        this.vantivTransactionDataBitmap = data().deepCopy(fields()[24].schema(), other.vantivTransactionDataBitmap);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.year)) {
        this.year = data().deepCopy(fields()[25].schema(), other.year);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.taxRate)) {
        this.taxRate = data().deepCopy(fields()[26].schema(), other.taxRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.totalTaxAmount)) {
        this.totalTaxAmount = data().deepCopy(fields()[27].schema(), other.totalTaxAmount);
        fieldSetFlags()[27] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RequestType instance */
    private Builder(RequestType other) {
            super(RequestType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acquireInstId)) {
        this.acquireInstId = data().deepCopy(fields()[1].schema(), other.acquireInstId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.addPOS)) {
        this.addPOS = data().deepCopy(fields()[2].schema(), other.addPOS);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cardMasked)) {
        this.cardMasked = data().deepCopy(fields()[4].schema(), other.cardMasked);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.creditEMD)) {
        this.creditEMD = data().deepCopy(fields()[5].schema(), other.creditEMD);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[6].schema(), other.currencyCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entryMode)) {
        this.entryMode = data().deepCopy(fields()[7].schema(), other.entryMode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fee)) {
        this.fee = data().deepCopy(fields()[8].schema(), other.fee);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.localDate)) {
        this.localDate = data().deepCopy(fields()[9].schema(), other.localDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.localTime)) {
        this.localTime = data().deepCopy(fields()[10].schema(), other.localTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.merchantAddress)) {
        this.merchantAddress = data().deepCopy(fields()[11].schema(), other.merchantAddress);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.merchantId)) {
        this.merchantId = data().deepCopy(fields()[12].schema(), other.merchantId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.merchantName)) {
        this.merchantName = data().deepCopy(fields()[13].schema(), other.merchantName);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.merchantType)) {
        this.merchantType = data().deepCopy(fields()[14].schema(), other.merchantType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.messageType)) {
        this.messageType = data().deepCopy(fields()[15].schema(), other.messageType);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.posConCode)) {
        this.posConCode = data().deepCopy(fields()[16].schema(), other.posConCode);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.processingCode)) {
        this.processingCode = data().deepCopy(fields()[17].schema(), other.processingCode);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.retrievalRrefNum)) {
        this.retrievalRrefNum = data().deepCopy(fields()[18].schema(), other.retrievalRrefNum);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.sysTraceAuditNum)) {
        this.sysTraceAuditNum = data().deepCopy(fields()[19].schema(), other.sysTraceAuditNum);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[20].schema(), other.terminalId);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transmissionTimeDate)) {
        this.transmissionTimeDate = data().deepCopy(fields()[21].schema(), other.transmissionTimeDate);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.vantivTransactionData)) {
        this.vantivTransactionData = data().deepCopy(fields()[22].schema(), other.vantivTransactionData);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.vantivTransactionDataBinaryBitmap)) {
        this.vantivTransactionDataBinaryBitmap = data().deepCopy(fields()[23].schema(), other.vantivTransactionDataBinaryBitmap);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.vantivTransactionDataBitmap)) {
        this.vantivTransactionDataBitmap = data().deepCopy(fields()[24].schema(), other.vantivTransactionDataBitmap);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.year)) {
        this.year = data().deepCopy(fields()[25].schema(), other.year);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.taxRate)) {
        this.taxRate = data().deepCopy(fields()[26].schema(), other.taxRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.totalTaxAmount)) {
        this.totalTaxAmount = data().deepCopy(fields()[27].schema(), other.totalTaxAmount);
        fieldSetFlags()[27] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public RequestType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public RequestType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'acquireInstId' field */
    public CharSequence getAcquireInstId() {
      return acquireInstId;
    }
    
    /** Sets the value of the 'acquireInstId' field */
    public RequestType.Builder setAcquireInstId(CharSequence value) {
      validate(fields()[1], value);
      this.acquireInstId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'acquireInstId' field has been set */
    public boolean hasAcquireInstId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'acquireInstId' field */
    public RequestType.Builder clearAcquireInstId() {
      acquireInstId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'addPOS' field */
    public CharSequence getAddPOS() {
      return addPOS;
    }
    
    /** Sets the value of the 'addPOS' field */
    public RequestType.Builder setAddPOS(CharSequence value) {
      validate(fields()[2], value);
      this.addPOS = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'addPOS' field has been set */
    public boolean hasAddPOS() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'addPOS' field */
    public RequestType.Builder clearAddPOS() {
      addPOS = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'amount' field */
    public CharSequence getAmount() {
      return amount;
    }
    
    /** Sets the value of the 'amount' field */
    public RequestType.Builder setAmount(CharSequence value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'amount' field has been set */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'amount' field */
    public RequestType.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'cardMasked' field */
    public CharSequence getCardMasked() {
      return cardMasked;
    }
    
    /** Sets the value of the 'cardMasked' field */
    public RequestType.Builder setCardMasked(CharSequence value) {
      validate(fields()[4], value);
      this.cardMasked = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'cardMasked' field has been set */
    public boolean hasCardMasked() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'cardMasked' field */
    public RequestType.Builder clearCardMasked() {
      cardMasked = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'creditEMD' field */
    public Boolean getCreditEMD() {
      return creditEMD;
    }
    
    /** Sets the value of the 'creditEMD' field */
    public RequestType.Builder setCreditEMD(Boolean value) {
      validate(fields()[5], value);
      this.creditEMD = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'creditEMD' field has been set */
    public boolean hasCreditEMD() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'creditEMD' field */
    public RequestType.Builder clearCreditEMD() {
      creditEMD = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'currencyCode' field */
    public CharSequence getCurrencyCode() {
      return currencyCode;
    }
    
    /** Sets the value of the 'currencyCode' field */
    public RequestType.Builder setCurrencyCode(CharSequence value) {
      validate(fields()[6], value);
      this.currencyCode = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'currencyCode' field has been set */
    public boolean hasCurrencyCode() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'currencyCode' field */
    public RequestType.Builder clearCurrencyCode() {
      currencyCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'entryMode' field */
    public CharSequence getEntryMode() {
      return entryMode;
    }
    
    /** Sets the value of the 'entryMode' field */
    public RequestType.Builder setEntryMode(CharSequence value) {
      validate(fields()[7], value);
      this.entryMode = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'entryMode' field has been set */
    public boolean hasEntryMode() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'entryMode' field */
    public RequestType.Builder clearEntryMode() {
      entryMode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'fee' field */
    public CharSequence getFee() {
      return fee;
    }
    
    /** Sets the value of the 'fee' field */
    public RequestType.Builder setFee(CharSequence value) {
      validate(fields()[8], value);
      this.fee = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'fee' field has been set */
    public boolean hasFee() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'fee' field */
    public RequestType.Builder clearFee() {
      fee = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'localDate' field */
    public CharSequence getLocalDate() {
      return localDate;
    }
    
    /** Sets the value of the 'localDate' field */
    public RequestType.Builder setLocalDate(CharSequence value) {
      validate(fields()[9], value);
      this.localDate = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'localDate' field has been set */
    public boolean hasLocalDate() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'localDate' field */
    public RequestType.Builder clearLocalDate() {
      localDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'localTime' field */
    public CharSequence getLocalTime() {
      return localTime;
    }
    
    /** Sets the value of the 'localTime' field */
    public RequestType.Builder setLocalTime(CharSequence value) {
      validate(fields()[10], value);
      this.localTime = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'localTime' field has been set */
    public boolean hasLocalTime() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'localTime' field */
    public RequestType.Builder clearLocalTime() {
      localTime = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'merchantAddress' field */
    public CharSequence getMerchantAddress() {
      return merchantAddress;
    }
    
    /** Sets the value of the 'merchantAddress' field */
    public RequestType.Builder setMerchantAddress(CharSequence value) {
      validate(fields()[11], value);
      this.merchantAddress = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantAddress' field has been set */
    public boolean hasMerchantAddress() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'merchantAddress' field */
    public RequestType.Builder clearMerchantAddress() {
      merchantAddress = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'merchantId' field */
    public CharSequence getMerchantId() {
      return merchantId;
    }
    
    /** Sets the value of the 'merchantId' field */
    public RequestType.Builder setMerchantId(CharSequence value) {
      validate(fields()[12], value);
      this.merchantId = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantId' field has been set */
    public boolean hasMerchantId() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'merchantId' field */
    public RequestType.Builder clearMerchantId() {
      merchantId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'merchantName' field */
    public CharSequence getMerchantName() {
      return merchantName;
    }
    
    /** Sets the value of the 'merchantName' field */
    public RequestType.Builder setMerchantName(CharSequence value) {
      validate(fields()[13], value);
      this.merchantName = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantName' field has been set */
    public boolean hasMerchantName() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'merchantName' field */
    public RequestType.Builder clearMerchantName() {
      merchantName = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'merchantType' field */
    public CharSequence getMerchantType() {
      return merchantType;
    }
    
    /** Sets the value of the 'merchantType' field */
    public RequestType.Builder setMerchantType(CharSequence value) {
      validate(fields()[14], value);
      this.merchantType = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'merchantType' field has been set */
    public boolean hasMerchantType() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'merchantType' field */
    public RequestType.Builder clearMerchantType() {
      merchantType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'messageType' field */
    public CharSequence getMessageType() {
      return messageType;
    }
    
    /** Sets the value of the 'messageType' field */
    public RequestType.Builder setMessageType(CharSequence value) {
      validate(fields()[15], value);
      this.messageType = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'messageType' field has been set */
    public boolean hasMessageType() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'messageType' field */
    public RequestType.Builder clearMessageType() {
      messageType = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'posConCode' field */
    public CharSequence getPosConCode() {
      return posConCode;
    }
    
    /** Sets the value of the 'posConCode' field */
    public RequestType.Builder setPosConCode(CharSequence value) {
      validate(fields()[16], value);
      this.posConCode = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'posConCode' field has been set */
    public boolean hasPosConCode() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'posConCode' field */
    public RequestType.Builder clearPosConCode() {
      posConCode = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'processingCode' field */
    public CharSequence getProcessingCode() {
      return processingCode;
    }
    
    /** Sets the value of the 'processingCode' field */
    public RequestType.Builder setProcessingCode(CharSequence value) {
      validate(fields()[17], value);
      this.processingCode = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'processingCode' field has been set */
    public boolean hasProcessingCode() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'processingCode' field */
    public RequestType.Builder clearProcessingCode() {
      processingCode = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'retrievalRrefNum' field */
    public CharSequence getRetrievalRrefNum() {
      return retrievalRrefNum;
    }
    
    /** Sets the value of the 'retrievalRrefNum' field */
    public RequestType.Builder setRetrievalRrefNum(CharSequence value) {
      validate(fields()[18], value);
      this.retrievalRrefNum = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'retrievalRrefNum' field has been set */
    public boolean hasRetrievalRrefNum() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'retrievalRrefNum' field */
    public RequestType.Builder clearRetrievalRrefNum() {
      retrievalRrefNum = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'sysTraceAuditNum' field */
    public CharSequence getSysTraceAuditNum() {
      return sysTraceAuditNum;
    }
    
    /** Sets the value of the 'sysTraceAuditNum' field */
    public RequestType.Builder setSysTraceAuditNum(CharSequence value) {
      validate(fields()[19], value);
      this.sysTraceAuditNum = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'sysTraceAuditNum' field has been set */
    public boolean hasSysTraceAuditNum() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'sysTraceAuditNum' field */
    public RequestType.Builder clearSysTraceAuditNum() {
      sysTraceAuditNum = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'terminalId' field */
    public CharSequence getTerminalId() {
      return terminalId;
    }
    
    /** Sets the value of the 'terminalId' field */
    public RequestType.Builder setTerminalId(CharSequence value) {
      validate(fields()[20], value);
      this.terminalId = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'terminalId' field has been set */
    public boolean hasTerminalId() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'terminalId' field */
    public RequestType.Builder clearTerminalId() {
      terminalId = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'transmissionTimeDate' field */
    public CharSequence getTransmissionTimeDate() {
      return transmissionTimeDate;
    }
    
    /** Sets the value of the 'transmissionTimeDate' field */
    public RequestType.Builder setTransmissionTimeDate(CharSequence value) {
      validate(fields()[21], value);
      this.transmissionTimeDate = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'transmissionTimeDate' field has been set */
    public boolean hasTransmissionTimeDate() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'transmissionTimeDate' field */
    public RequestType.Builder clearTransmissionTimeDate() {
      transmissionTimeDate = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'vantivTransactionData' field */
    public CharSequence getVantivTransactionData() {
      return vantivTransactionData;
    }
    
    /** Sets the value of the 'vantivTransactionData' field */
    public RequestType.Builder setVantivTransactionData(CharSequence value) {
      validate(fields()[22], value);
      this.vantivTransactionData = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'vantivTransactionData' field has been set */
    public boolean hasVantivTransactionData() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'vantivTransactionData' field */
    public RequestType.Builder clearVantivTransactionData() {
      vantivTransactionData = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'vantivTransactionDataBinaryBitmap' field */
    public CharSequence getVantivTransactionDataBinaryBitmap() {
      return vantivTransactionDataBinaryBitmap;
    }
    
    /** Sets the value of the 'vantivTransactionDataBinaryBitmap' field */
    public RequestType.Builder setVantivTransactionDataBinaryBitmap(CharSequence value) {
      validate(fields()[23], value);
      this.vantivTransactionDataBinaryBitmap = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'vantivTransactionDataBinaryBitmap' field has been set */
    public boolean hasVantivTransactionDataBinaryBitmap() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'vantivTransactionDataBinaryBitmap' field */
    public RequestType.Builder clearVantivTransactionDataBinaryBitmap() {
      vantivTransactionDataBinaryBitmap = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'vantivTransactionDataBitmap' field */
    public CharSequence getVantivTransactionDataBitmap() {
      return vantivTransactionDataBitmap;
    }
    
    /** Sets the value of the 'vantivTransactionDataBitmap' field */
    public RequestType.Builder setVantivTransactionDataBitmap(CharSequence value) {
      validate(fields()[24], value);
      this.vantivTransactionDataBitmap = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'vantivTransactionDataBitmap' field has been set */
    public boolean hasVantivTransactionDataBitmap() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'vantivTransactionDataBitmap' field */
    public RequestType.Builder clearVantivTransactionDataBitmap() {
      vantivTransactionDataBitmap = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public RequestType.Builder setYear(CharSequence value) {
      validate(fields()[25], value);
      this.year = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'year' field */
    public RequestType.Builder clearYear() {
      year = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'taxRate' field */
    public CharSequence getTaxRate() {
      return taxRate;
    }
    
    /** Sets the value of the 'taxRate' field */
    public RequestType.Builder setTaxRate(CharSequence value) {
      validate(fields()[26], value);
      this.taxRate = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'taxRate' field has been set */
    public boolean hasTaxRate() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'taxRate' field */
    public RequestType.Builder clearTaxRate() {
      taxRate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'totalTaxAmount' field */
    public CharSequence getTotalTaxAmount() {
      return totalTaxAmount;
    }
    
    /** Sets the value of the 'totalTaxAmount' field */
    public RequestType.Builder setTotalTaxAmount(CharSequence value) {
      validate(fields()[27], value);
      this.totalTaxAmount = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'totalTaxAmount' field has been set */
    public boolean hasTotalTaxAmount() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'totalTaxAmount' field */
    public RequestType.Builder clearTotalTaxAmount() {
      totalTaxAmount = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    @Override
    public RequestType build() {
      try {
        RequestType record = new RequestType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.acquireInstId = fieldSetFlags()[1] ? this.acquireInstId : (CharSequence) defaultValue(fields()[1]);
        record.addPOS = fieldSetFlags()[2] ? this.addPOS : (CharSequence) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (CharSequence) defaultValue(fields()[3]);
        record.cardMasked = fieldSetFlags()[4] ? this.cardMasked : (CharSequence) defaultValue(fields()[4]);
        record.creditEMD = fieldSetFlags()[5] ? this.creditEMD : (Boolean) defaultValue(fields()[5]);
        record.currencyCode = fieldSetFlags()[6] ? this.currencyCode : (CharSequence) defaultValue(fields()[6]);
        record.entryMode = fieldSetFlags()[7] ? this.entryMode : (CharSequence) defaultValue(fields()[7]);
        record.fee = fieldSetFlags()[8] ? this.fee : (CharSequence) defaultValue(fields()[8]);
        record.localDate = fieldSetFlags()[9] ? this.localDate : (CharSequence) defaultValue(fields()[9]);
        record.localTime = fieldSetFlags()[10] ? this.localTime : (CharSequence) defaultValue(fields()[10]);
        record.merchantAddress = fieldSetFlags()[11] ? this.merchantAddress : (CharSequence) defaultValue(fields()[11]);
        record.merchantId = fieldSetFlags()[12] ? this.merchantId : (CharSequence) defaultValue(fields()[12]);
        record.merchantName = fieldSetFlags()[13] ? this.merchantName : (CharSequence) defaultValue(fields()[13]);
        record.merchantType = fieldSetFlags()[14] ? this.merchantType : (CharSequence) defaultValue(fields()[14]);
        record.messageType = fieldSetFlags()[15] ? this.messageType : (CharSequence) defaultValue(fields()[15]);
        record.posConCode = fieldSetFlags()[16] ? this.posConCode : (CharSequence) defaultValue(fields()[16]);
        record.processingCode = fieldSetFlags()[17] ? this.processingCode : (CharSequence) defaultValue(fields()[17]);
        record.retrievalRrefNum = fieldSetFlags()[18] ? this.retrievalRrefNum : (CharSequence) defaultValue(fields()[18]);
        record.sysTraceAuditNum = fieldSetFlags()[19] ? this.sysTraceAuditNum : (CharSequence) defaultValue(fields()[19]);
        record.terminalId = fieldSetFlags()[20] ? this.terminalId : (CharSequence) defaultValue(fields()[20]);
        record.transmissionTimeDate = fieldSetFlags()[21] ? this.transmissionTimeDate : (CharSequence) defaultValue(fields()[21]);
        record.vantivTransactionData = fieldSetFlags()[22] ? this.vantivTransactionData : (CharSequence) defaultValue(fields()[22]);
        record.vantivTransactionDataBinaryBitmap = fieldSetFlags()[23] ? this.vantivTransactionDataBinaryBitmap : (CharSequence) defaultValue(fields()[23]);
        record.vantivTransactionDataBitmap = fieldSetFlags()[24] ? this.vantivTransactionDataBitmap : (CharSequence) defaultValue(fields()[24]);
        record.year = fieldSetFlags()[25] ? this.year : (CharSequence) defaultValue(fields()[25]);
        record.taxRate = fieldSetFlags()[26] ? this.taxRate : (CharSequence) defaultValue(fields()[26]);
        record.totalTaxAmount = fieldSetFlags()[27] ? this.totalTaxAmount : (CharSequence) defaultValue(fields()[27]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
