/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VeeaTicketType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VeeaTicketType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"veeaMerchantId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"createdAtDateTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"veeaTicketItemDetail\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"VeeaTicketItemDetailType\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"inventoryItemId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cost\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"taxPercentage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"note\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"quantity\",\"type\":[\"null\",\"double\"],\"default\":null}]},\"default\":[]}],\"default\":null},{\"name\":\"tip\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"notes\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"finalizedAtDateTime\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public Long veeaMerchantId;
  @Deprecated public CharSequence name;
  @Deprecated public Long createdAtDateTime;
  @Deprecated public java.util.List<VeeaTicketItemDetailType> veeaTicketItemDetail;
  @Deprecated public Double tip;
  @Deprecated public CharSequence notes;
  @Deprecated public Long finalizedAtDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VeeaTicketType() {}

  /**
   * All-args constructor.
   */
  public VeeaTicketType(Long id, Long veeaMerchantId, CharSequence name, Long createdAtDateTime, java.util.List<VeeaTicketItemDetailType> veeaTicketItemDetail, Double tip, CharSequence notes, Long finalizedAtDateTime) {
    this.id = id;
    this.veeaMerchantId = veeaMerchantId;
    this.name = name;
    this.createdAtDateTime = createdAtDateTime;
    this.veeaTicketItemDetail = veeaTicketItemDetail;
    this.tip = tip;
    this.notes = notes;
    this.finalizedAtDateTime = finalizedAtDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return veeaMerchantId;
    case 2: return name;
    case 3: return createdAtDateTime;
    case 4: return veeaTicketItemDetail;
    case 5: return tip;
    case 6: return notes;
    case 7: return finalizedAtDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: veeaMerchantId = (Long)value$; break;
    case 2: name = (CharSequence)value$; break;
    case 3: createdAtDateTime = (Long)value$; break;
    case 4: veeaTicketItemDetail = (java.util.List<VeeaTicketItemDetailType>)value$; break;
    case 5: tip = (Double)value$; break;
    case 6: notes = (CharSequence)value$; break;
    case 7: finalizedAtDateTime = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'veeaMerchantId' field.
   */
  public Long getVeeaMerchantId() {
    return veeaMerchantId;
  }

  /**
   * Sets the value of the 'veeaMerchantId' field.
   * @param value the value to set.
   */
  public void setVeeaMerchantId(Long value) {
    this.veeaMerchantId = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'createdAtDateTime' field.
   */
  public Long getCreatedAtDateTime() {
    return createdAtDateTime;
  }

  /**
   * Sets the value of the 'createdAtDateTime' field.
   * @param value the value to set.
   */
  public void setCreatedAtDateTime(Long value) {
    this.createdAtDateTime = value;
  }

  /**
   * Gets the value of the 'veeaTicketItemDetail' field.
   */
  public java.util.List<VeeaTicketItemDetailType> getVeeaTicketItemDetail() {
    return veeaTicketItemDetail;
  }

  /**
   * Sets the value of the 'veeaTicketItemDetail' field.
   * @param value the value to set.
   */
  public void setVeeaTicketItemDetail(java.util.List<VeeaTicketItemDetailType> value) {
    this.veeaTicketItemDetail = value;
  }

  /**
   * Gets the value of the 'tip' field.
   */
  public Double getTip() {
    return tip;
  }

  /**
   * Sets the value of the 'tip' field.
   * @param value the value to set.
   */
  public void setTip(Double value) {
    this.tip = value;
  }

  /**
   * Gets the value of the 'notes' field.
   */
  public CharSequence getNotes() {
    return notes;
  }

  /**
   * Sets the value of the 'notes' field.
   * @param value the value to set.
   */
  public void setNotes(CharSequence value) {
    this.notes = value;
  }

  /**
   * Gets the value of the 'finalizedAtDateTime' field.
   */
  public Long getFinalizedAtDateTime() {
    return finalizedAtDateTime;
  }

  /**
   * Sets the value of the 'finalizedAtDateTime' field.
   * @param value the value to set.
   */
  public void setFinalizedAtDateTime(Long value) {
    this.finalizedAtDateTime = value;
  }

  /** Creates a new VeeaTicketType RecordBuilder */
  public static VeeaTicketType.Builder newBuilder() {
    return new VeeaTicketType.Builder();
  }
  
  /** Creates a new VeeaTicketType RecordBuilder by copying an existing Builder */
  public static VeeaTicketType.Builder newBuilder(VeeaTicketType.Builder other) {
    return new VeeaTicketType.Builder(other);
  }
  
  /** Creates a new VeeaTicketType RecordBuilder by copying an existing VeeaTicketType instance */
  public static VeeaTicketType.Builder newBuilder(VeeaTicketType other) {
    return new VeeaTicketType.Builder(other);
  }
  
  /**
   * RecordBuilder for VeeaTicketType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VeeaTicketType>
    implements org.apache.avro.data.RecordBuilder<VeeaTicketType> {

    private Long id;
    private Long veeaMerchantId;
    private CharSequence name;
    private Long createdAtDateTime;
    private java.util.List<VeeaTicketItemDetailType> veeaTicketItemDetail;
    private Double tip;
    private CharSequence notes;
    private Long finalizedAtDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(VeeaTicketType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(VeeaTicketType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.veeaMerchantId)) {
        this.veeaMerchantId = data().deepCopy(fields()[1].schema(), other.veeaMerchantId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdAtDateTime)) {
        this.createdAtDateTime = data().deepCopy(fields()[3].schema(), other.createdAtDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.veeaTicketItemDetail)) {
        this.veeaTicketItemDetail = data().deepCopy(fields()[4].schema(), other.veeaTicketItemDetail);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tip)) {
        this.tip = data().deepCopy(fields()[5].schema(), other.tip);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.notes)) {
        this.notes = data().deepCopy(fields()[6].schema(), other.notes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.finalizedAtDateTime)) {
        this.finalizedAtDateTime = data().deepCopy(fields()[7].schema(), other.finalizedAtDateTime);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VeeaTicketType instance */
    private Builder(VeeaTicketType other) {
            super(VeeaTicketType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.veeaMerchantId)) {
        this.veeaMerchantId = data().deepCopy(fields()[1].schema(), other.veeaMerchantId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdAtDateTime)) {
        this.createdAtDateTime = data().deepCopy(fields()[3].schema(), other.createdAtDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.veeaTicketItemDetail)) {
        this.veeaTicketItemDetail = data().deepCopy(fields()[4].schema(), other.veeaTicketItemDetail);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tip)) {
        this.tip = data().deepCopy(fields()[5].schema(), other.tip);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.notes)) {
        this.notes = data().deepCopy(fields()[6].schema(), other.notes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.finalizedAtDateTime)) {
        this.finalizedAtDateTime = data().deepCopy(fields()[7].schema(), other.finalizedAtDateTime);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public VeeaTicketType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public VeeaTicketType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'veeaMerchantId' field */
    public Long getVeeaMerchantId() {
      return veeaMerchantId;
    }
    
    /** Sets the value of the 'veeaMerchantId' field */
    public VeeaTicketType.Builder setVeeaMerchantId(Long value) {
      validate(fields()[1], value);
      this.veeaMerchantId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'veeaMerchantId' field has been set */
    public boolean hasVeeaMerchantId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'veeaMerchantId' field */
    public VeeaTicketType.Builder clearVeeaMerchantId() {
      veeaMerchantId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public VeeaTicketType.Builder setName(CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'name' field */
    public VeeaTicketType.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'createdAtDateTime' field */
    public Long getCreatedAtDateTime() {
      return createdAtDateTime;
    }
    
    /** Sets the value of the 'createdAtDateTime' field */
    public VeeaTicketType.Builder setCreatedAtDateTime(Long value) {
      validate(fields()[3], value);
      this.createdAtDateTime = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'createdAtDateTime' field has been set */
    public boolean hasCreatedAtDateTime() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'createdAtDateTime' field */
    public VeeaTicketType.Builder clearCreatedAtDateTime() {
      createdAtDateTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'veeaTicketItemDetail' field */
    public java.util.List<VeeaTicketItemDetailType> getVeeaTicketItemDetail() {
      return veeaTicketItemDetail;
    }
    
    /** Sets the value of the 'veeaTicketItemDetail' field */
    public VeeaTicketType.Builder setVeeaTicketItemDetail(java.util.List<VeeaTicketItemDetailType> value) {
      validate(fields()[4], value);
      this.veeaTicketItemDetail = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'veeaTicketItemDetail' field has been set */
    public boolean hasVeeaTicketItemDetail() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'veeaTicketItemDetail' field */
    public VeeaTicketType.Builder clearVeeaTicketItemDetail() {
      veeaTicketItemDetail = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'tip' field */
    public Double getTip() {
      return tip;
    }
    
    /** Sets the value of the 'tip' field */
    public VeeaTicketType.Builder setTip(Double value) {
      validate(fields()[5], value);
      this.tip = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'tip' field has been set */
    public boolean hasTip() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'tip' field */
    public VeeaTicketType.Builder clearTip() {
      tip = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'notes' field */
    public CharSequence getNotes() {
      return notes;
    }
    
    /** Sets the value of the 'notes' field */
    public VeeaTicketType.Builder setNotes(CharSequence value) {
      validate(fields()[6], value);
      this.notes = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'notes' field has been set */
    public boolean hasNotes() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'notes' field */
    public VeeaTicketType.Builder clearNotes() {
      notes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'finalizedAtDateTime' field */
    public Long getFinalizedAtDateTime() {
      return finalizedAtDateTime;
    }
    
    /** Sets the value of the 'finalizedAtDateTime' field */
    public VeeaTicketType.Builder setFinalizedAtDateTime(Long value) {
      validate(fields()[7], value);
      this.finalizedAtDateTime = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'finalizedAtDateTime' field has been set */
    public boolean hasFinalizedAtDateTime() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'finalizedAtDateTime' field */
    public VeeaTicketType.Builder clearFinalizedAtDateTime() {
      finalizedAtDateTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public VeeaTicketType build() {
      try {
        VeeaTicketType record = new VeeaTicketType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.veeaMerchantId = fieldSetFlags()[1] ? this.veeaMerchantId : (Long) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (CharSequence) defaultValue(fields()[2]);
        record.createdAtDateTime = fieldSetFlags()[3] ? this.createdAtDateTime : (Long) defaultValue(fields()[3]);
        record.veeaTicketItemDetail = fieldSetFlags()[4] ? this.veeaTicketItemDetail : (java.util.List<VeeaTicketItemDetailType>) defaultValue(fields()[4]);
        record.tip = fieldSetFlags()[5] ? this.tip : (Double) defaultValue(fields()[5]);
        record.notes = fieldSetFlags()[6] ? this.notes : (CharSequence) defaultValue(fields()[6]);
        record.finalizedAtDateTime = fieldSetFlags()[7] ? this.finalizedAtDateTime : (Long) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
