/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MetaType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MetaType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"platform\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"runBy\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public CharSequence source;
  @Deprecated public CharSequence platform;
  @Deprecated public CharSequence version;
  @Deprecated public CharSequence runBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MetaType() {}

  /**
   * All-args constructor.
   */
  public MetaType(Long id, CharSequence source, CharSequence platform, CharSequence version, CharSequence runBy) {
    this.id = id;
    this.source = source;
    this.platform = platform;
    this.version = version;
    this.runBy = runBy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return source;
    case 2: return platform;
    case 3: return version;
    case 4: return runBy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: source = (CharSequence)value$; break;
    case 2: platform = (CharSequence)value$; break;
    case 3: version = (CharSequence)value$; break;
    case 4: runBy = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'platform' field.
   */
  public CharSequence getPlatform() {
    return platform;
  }

  /**
   * Sets the value of the 'platform' field.
   * @param value the value to set.
   */
  public void setPlatform(CharSequence value) {
    this.platform = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'runBy' field.
   */
  public CharSequence getRunBy() {
    return runBy;
  }

  /**
   * Sets the value of the 'runBy' field.
   * @param value the value to set.
   */
  public void setRunBy(CharSequence value) {
    this.runBy = value;
  }

  /** Creates a new MetaType RecordBuilder */
  public static MetaType.Builder newBuilder() {
    return new MetaType.Builder();
  }
  
  /** Creates a new MetaType RecordBuilder by copying an existing Builder */
  public static MetaType.Builder newBuilder(MetaType.Builder other) {
    return new MetaType.Builder(other);
  }
  
  /** Creates a new MetaType RecordBuilder by copying an existing MetaType instance */
  public static MetaType.Builder newBuilder(MetaType other) {
    return new MetaType.Builder(other);
  }
  
  /**
   * RecordBuilder for MetaType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MetaType>
    implements org.apache.avro.data.RecordBuilder<MetaType> {

    private Long id;
    private CharSequence source;
    private CharSequence platform;
    private CharSequence version;
    private CharSequence runBy;

    /** Creates a new Builder */
    private Builder() {
      super(MetaType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(MetaType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.platform)) {
        this.platform = data().deepCopy(fields()[2].schema(), other.platform);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.runBy)) {
        this.runBy = data().deepCopy(fields()[4].schema(), other.runBy);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MetaType instance */
    private Builder(MetaType other) {
            super(MetaType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.platform)) {
        this.platform = data().deepCopy(fields()[2].schema(), other.platform);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.runBy)) {
        this.runBy = data().deepCopy(fields()[4].schema(), other.runBy);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public MetaType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public MetaType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public CharSequence getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public MetaType.Builder setSource(CharSequence value) {
      validate(fields()[1], value);
      this.source = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'source' field */
    public MetaType.Builder clearSource() {
      source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'platform' field */
    public CharSequence getPlatform() {
      return platform;
    }
    
    /** Sets the value of the 'platform' field */
    public MetaType.Builder setPlatform(CharSequence value) {
      validate(fields()[2], value);
      this.platform = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'platform' field has been set */
    public boolean hasPlatform() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'platform' field */
    public MetaType.Builder clearPlatform() {
      platform = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public CharSequence getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public MetaType.Builder setVersion(CharSequence value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'version' field */
    public MetaType.Builder clearVersion() {
      version = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'runBy' field */
    public CharSequence getRunBy() {
      return runBy;
    }
    
    /** Sets the value of the 'runBy' field */
    public MetaType.Builder setRunBy(CharSequence value) {
      validate(fields()[4], value);
      this.runBy = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'runBy' field has been set */
    public boolean hasRunBy() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'runBy' field */
    public MetaType.Builder clearRunBy() {
      runBy = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public MetaType build() {
      try {
        MetaType record = new MetaType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.source = fieldSetFlags()[1] ? this.source : (CharSequence) defaultValue(fields()[1]);
        record.platform = fieldSetFlags()[2] ? this.platform : (CharSequence) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (CharSequence) defaultValue(fields()[3]);
        record.runBy = fieldSetFlags()[4] ? this.runBy : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
