/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.veea.bosstool.model.transactionLog;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VeeaTicketItemDetailType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VeeaTicketItemDetailType\",\"namespace\":\"avro.transactionLog\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"inventoryItemId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cost\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"taxPercentage\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"note\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"quantity\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long id;
  @Deprecated public Long inventoryItemId;
  @Deprecated public CharSequence name;
  @Deprecated public Double cost;
  @Deprecated public Double taxPercentage;
  @Deprecated public CharSequence note;
  @Deprecated public Double quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VeeaTicketItemDetailType() {}

  /**
   * All-args constructor.
   */
  public VeeaTicketItemDetailType(Long id, Long inventoryItemId, CharSequence name, Double cost, Double taxPercentage, CharSequence note, Double quantity) {
    this.id = id;
    this.inventoryItemId = inventoryItemId;
    this.name = name;
    this.cost = cost;
    this.taxPercentage = taxPercentage;
    this.note = note;
    this.quantity = quantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return inventoryItemId;
    case 2: return name;
    case 3: return cost;
    case 4: return taxPercentage;
    case 5: return note;
    case 6: return quantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: inventoryItemId = (Long)value$; break;
    case 2: name = (CharSequence)value$; break;
    case 3: cost = (Double)value$; break;
    case 4: taxPercentage = (Double)value$; break;
    case 5: note = (CharSequence)value$; break;
    case 6: quantity = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'inventoryItemId' field.
   */
  public Long getInventoryItemId() {
    return inventoryItemId;
  }

  /**
   * Sets the value of the 'inventoryItemId' field.
   * @param value the value to set.
   */
  public void setInventoryItemId(Long value) {
    this.inventoryItemId = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'cost' field.
   */
  public Double getCost() {
    return cost;
  }

  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(Double value) {
    this.cost = value;
  }

  /**
   * Gets the value of the 'taxPercentage' field.
   */
  public Double getTaxPercentage() {
    return taxPercentage;
  }

  /**
   * Sets the value of the 'taxPercentage' field.
   * @param value the value to set.
   */
  public void setTaxPercentage(Double value) {
    this.taxPercentage = value;
  }

  /**
   * Gets the value of the 'note' field.
   */
  public CharSequence getNote() {
    return note;
  }

  /**
   * Sets the value of the 'note' field.
   * @param value the value to set.
   */
  public void setNote(CharSequence value) {
    this.note = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   */
  public Double getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(Double value) {
    this.quantity = value;
  }

  /** Creates a new VeeaTicketItemDetailType RecordBuilder */
  public static VeeaTicketItemDetailType.Builder newBuilder() {
    return new VeeaTicketItemDetailType.Builder();
  }
  
  /** Creates a new VeeaTicketItemDetailType RecordBuilder by copying an existing Builder */
  public static VeeaTicketItemDetailType.Builder newBuilder(VeeaTicketItemDetailType.Builder other) {
    return new VeeaTicketItemDetailType.Builder(other);
  }
  
  /** Creates a new VeeaTicketItemDetailType RecordBuilder by copying an existing VeeaTicketItemDetailType instance */
  public static VeeaTicketItemDetailType.Builder newBuilder(VeeaTicketItemDetailType other) {
    return new VeeaTicketItemDetailType.Builder(other);
  }
  
  /**
   * RecordBuilder for VeeaTicketItemDetailType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VeeaTicketItemDetailType>
    implements org.apache.avro.data.RecordBuilder<VeeaTicketItemDetailType> {

    private Long id;
    private Long inventoryItemId;
    private CharSequence name;
    private Double cost;
    private Double taxPercentage;
    private CharSequence note;
    private Double quantity;

    /** Creates a new Builder */
    private Builder() {
      super(VeeaTicketItemDetailType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(VeeaTicketItemDetailType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inventoryItemId)) {
        this.inventoryItemId = data().deepCopy(fields()[1].schema(), other.inventoryItemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.taxPercentage)) {
        this.taxPercentage = data().deepCopy(fields()[4].schema(), other.taxPercentage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.note)) {
        this.note = data().deepCopy(fields()[5].schema(), other.note);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.quantity)) {
        this.quantity = data().deepCopy(fields()[6].schema(), other.quantity);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VeeaTicketItemDetailType instance */
    private Builder(VeeaTicketItemDetailType other) {
            super(VeeaTicketItemDetailType.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inventoryItemId)) {
        this.inventoryItemId = data().deepCopy(fields()[1].schema(), other.inventoryItemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.taxPercentage)) {
        this.taxPercentage = data().deepCopy(fields()[4].schema(), other.taxPercentage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.note)) {
        this.note = data().deepCopy(fields()[5].schema(), other.note);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.quantity)) {
        this.quantity = data().deepCopy(fields()[6].schema(), other.quantity);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public VeeaTicketItemDetailType.Builder setId(Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public VeeaTicketItemDetailType.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'inventoryItemId' field */
    public Long getInventoryItemId() {
      return inventoryItemId;
    }
    
    /** Sets the value of the 'inventoryItemId' field */
    public VeeaTicketItemDetailType.Builder setInventoryItemId(Long value) {
      validate(fields()[1], value);
      this.inventoryItemId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'inventoryItemId' field has been set */
    public boolean hasInventoryItemId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'inventoryItemId' field */
    public VeeaTicketItemDetailType.Builder clearInventoryItemId() {
      inventoryItemId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public VeeaTicketItemDetailType.Builder setName(CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'name' field */
    public VeeaTicketItemDetailType.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'cost' field */
    public Double getCost() {
      return cost;
    }
    
    /** Sets the value of the 'cost' field */
    public VeeaTicketItemDetailType.Builder setCost(Double value) {
      validate(fields()[3], value);
      this.cost = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'cost' field has been set */
    public boolean hasCost() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'cost' field */
    public VeeaTicketItemDetailType.Builder clearCost() {
      cost = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'taxPercentage' field */
    public Double getTaxPercentage() {
      return taxPercentage;
    }
    
    /** Sets the value of the 'taxPercentage' field */
    public VeeaTicketItemDetailType.Builder setTaxPercentage(Double value) {
      validate(fields()[4], value);
      this.taxPercentage = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'taxPercentage' field has been set */
    public boolean hasTaxPercentage() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'taxPercentage' field */
    public VeeaTicketItemDetailType.Builder clearTaxPercentage() {
      taxPercentage = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'note' field */
    public CharSequence getNote() {
      return note;
    }
    
    /** Sets the value of the 'note' field */
    public VeeaTicketItemDetailType.Builder setNote(CharSequence value) {
      validate(fields()[5], value);
      this.note = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'note' field has been set */
    public boolean hasNote() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'note' field */
    public VeeaTicketItemDetailType.Builder clearNote() {
      note = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'quantity' field */
    public Double getQuantity() {
      return quantity;
    }
    
    /** Sets the value of the 'quantity' field */
    public VeeaTicketItemDetailType.Builder setQuantity(Double value) {
      validate(fields()[6], value);
      this.quantity = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'quantity' field has been set */
    public boolean hasQuantity() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'quantity' field */
    public VeeaTicketItemDetailType.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public VeeaTicketItemDetailType build() {
      try {
        VeeaTicketItemDetailType record = new VeeaTicketItemDetailType();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.inventoryItemId = fieldSetFlags()[1] ? this.inventoryItemId : (Long) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (CharSequence) defaultValue(fields()[2]);
        record.cost = fieldSetFlags()[3] ? this.cost : (Double) defaultValue(fields()[3]);
        record.taxPercentage = fieldSetFlags()[4] ? this.taxPercentage : (Double) defaultValue(fields()[4]);
        record.note = fieldSetFlags()[5] ? this.note : (CharSequence) defaultValue(fields()[5]);
        record.quantity = fieldSetFlags()[6] ? this.quantity : (Double) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
